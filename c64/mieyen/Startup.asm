include "Vram.inc"
include "ZeroPage.inc"

ext InitSprites
ext InitVram, UpdateSprites
ext InitSound, SoundHandler
ext Main_

IntervalN equ $4295*6/6
IntervalP equ $4025*6/6

dseg
RegSave:
    defs $20
IrqSave:
    defw 0
NmiSave:
    defw 0
TimerCount: 
    defb 0

cseg
    lda $DD00 ; Port A, serial bus access. Bits:
    and #$fc | ora #$01 ; 1: Bank #2, $8000-$BFFF, 32768-49151
    sta $DD00

    lda $D011
    ora #$20 ; Bitmap mode
    sta $D011

    lda $D016
    ora #$10 ; Multicolor mode
    sta $D016

    lda $D018
    and #$01 | ora #$18 ; Bitmap:$a000, Text:$8400
    sta $D018

    lda #$ff | sta $d015 ; Sprite enable register

    jsr InitSprites
    jsr InitVram
    
    lda #0 | sta TimerCount

    sei
        lda $0314
        sta IrqSave
        lda $0315
        sta IrqSave+1
        lda #low IrqHandler
        sta $0314
        lda #high IrqHandler
        sta $0315

        lda #255
        sta $D012 ; Raster line to generate interrupt
        lda #1 ; Raster interrupt enabled
        sta $D019
        sta $D01A ; Interrupt control register. Bits
        lda #$7f
        sta $DC0D
        
        lda $0318
        sta NmiSave
        lda $0319
        sta NmiSave+1
        lda #low NmiHandler
        sta $0318
        lda #high NmiHandler
        sta $0319

        lda $02A6
        and 1
        if eq 
            lda #low IntervalN
            sta $DD04
            lda #high IntervalN
            sta $DD05
        else
            lda #low IntervalP
            sta $DD04
            lda #high IntervalP
            sta $DD05
        endif

        lda #$81 ; Enable NMI generated by timer A underflow.
        sta $DD0D ; Interrupt control and status register
        lda $DD0E
	    ora #$11
	    sta $DD0e
        sta $02A1
    cli

    jsr InitSound
jmp Main_


IrqHandler: public IrqHandler
    lda $D019
    and #$01
    if ne
        sta $D019
        jsr UpdateSprites
    endif
jmp (IrqSave)


NmiHandler: public NmiHandler
    pha
    txa | pha
    tya | pha
        lda $DD0D
        and #1
        if ne            
            inc TimerCount
            jsr SoundHandler

            lda #$81 ; Enable NMI generated by timer A underflow.
            sta $DD0D ; Interrupt control and status register
            lda $DD0e
            ora #$11
            sta $DD0e
            sta $02A1
        endif
    pla | tay
    pla | tax
    pla
    cli
rti
jmp (NmiSave)



; void WaitTimer(byte t);
dseg
time:
    defb 0
cseg
WaitTimer_: public WaitTimer_
    pha
        sty time
        do
            lda TimerCount
            cmp time
        while cc | wend
        sei
            lda #0 | sta TimerCount
        cli
    pla
rts